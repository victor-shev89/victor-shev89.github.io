I"JD<p>Каждый более ли менее весомый проект разростается до размеров, когда следить за переменными и созданными объектами сохраняя их в памяти программиста невозможно. Как был создан тот или иной объект уже не вспомнить. Но вдруг, меняя содержимое одной переменной, мы получаем неожиданное изменение другой. И эту ситуацию проще выловить, если программа упала. Но если она не сломалась, а продолжает неправильно работать, могут быть неприятные последствия.</p>

<h4 id="один-объект-много-имен">Один объект много имен</h4>

<p>При создании переменной, мы создаем в памяти какой-то объект и связываем его с именем. Например:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">list_of_int</span>
</code></pre></div></div>

<p>Тут мы создали объект  в памяти <code class="language-plaintext highlighter-rouge">[1, 2, 3] </code>  и дали ему название<code class="language-plaintext highlighter-rouge">list_of_int</code>. Далее мы присвоили объекту под названием <code class="language-plaintext highlighter-rouge">list_of_int</code> ещё одно название - <code class="language-plaintext highlighter-rouge">same_list_of_int</code>. Теперь у нас есть два названия для одного объекта <code class="language-plaintext highlighter-rouge">[1, 2, 3] </code>, и обращаться к нему и изменять его мы можем используя любое из них. Стоит твердо уяснить, что изменяя <code class="language-plaintext highlighter-rouge">list_of_int</code> мы не меняем <code class="language-plaintext highlighter-rouge">same_list_of_int</code>, мы меняем объект <code class="language-plaintext highlighter-rouge">[1, 2, 3] </code>, а его новое состояние мы можем увидеть используя любое из его имен.</p>

<p><img src="/zolan/images/2020/10/07/1.png" alt="" /></p>

<hr />

<p><em>Это как будто у вас есть кошка, которую вы зовёте <code class="language-plaintext highlighter-rouge">Муркой</code>, а ваш сосед, не зная об этом, зовет её <code class="language-plaintext highlighter-rouge">Мурлыкой</code>. Но если эта кошка подерется с котом и сломает хвост, он будет сломан и у <code class="language-plaintext highlighter-rouge">Мурки</code> и у  <code class="language-plaintext highlighter-rouge">Мурлыки</code>. Так что будьте осторожны и обеспечьте безопасность своему “кот(д)у”.</em></p>

<hr />

<p>Давайте изменим исходный объект, обратившись к нему по обоим из его ‘‘псевдонимов”:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">777</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"list_of_int: </span><span class="si">{</span><span class="n">list_of_int</span><span class="si">}</span><span class="s">, same_list_of_int: </span><span class="si">{</span><span class="n">same_list_of_int</span><span class="si">}</span><span class="s"> "</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="n">list_of_int</span><span class="p">:</span> <span class="p">[</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">777</span><span class="p">],</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="p">[</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">777</span><span class="p">]</span> 
</code></pre></div></div>

<p>Получим изменение объекта, доступное по всем его именам.</p>

<p><img src="/zolan/images/2020/10/07/2.png" alt="" /></p>

<p>Интересно, что присваивая новое имя объекту <code class="language-plaintext highlighter-rouge">[1, 2, 3] </code> через его существующее имя, мы создаем его “псевдоним”, а присваивая новому имени идентичный (по содержимому) объект, мы создаем новый объект:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"id list_of_int: </span><span class="si">{</span><span class="nb">id</span><span class="p">(</span><span class="n">list_of_int</span><span class="p">)</span><span class="si">}</span><span class="s">, id same_list_of_int: </span><span class="si">{</span><span class="nb">id</span><span class="p">(</span><span class="n">same_list_of_int</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="nb">id</span> <span class="n">list_of_int</span><span class="p">:</span> <span class="mi">140349047025600</span><span class="p">,</span> <span class="nb">id</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="mi">140349047638208</span>
</code></pre></div></div>

<p><img src="/zolan/images/2020/10/07/3.png" alt="" /></p>

<p>Понятно, что если этот подход используется в Python, то это является оптимальным для языка. Но это может иметь неожиданные эффекты, если не понимать как работают ссылки и создаются/копируются объекты.</p>

<p>Что делать, если есть некоторый объект, который должен быть копией другого, и его надо изменять, а исходный должен быть в целости и сохранности? Самый простой вариант - создать его заново, например, скопировав его или применив метод list() к исходной последовательности :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">list_of_int</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"id list_of_int: </span><span class="si">{</span><span class="nb">id</span><span class="p">(</span><span class="n">list_of_int</span><span class="p">)</span><span class="si">}</span><span class="s">, id same_list_of_int: </span><span class="si">{</span><span class="nb">id</span><span class="p">(</span><span class="n">same_list_of_int</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="nb">id</span> <span class="n">list_of_int</span><span class="p">:</span> <span class="mi">140349047639488</span><span class="p">,</span> <span class="nb">id</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="mi">140349047078336</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">list_of_int</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"id list_of_int: </span><span class="si">{</span><span class="nb">id</span><span class="p">(</span><span class="n">list_of_int</span><span class="p">)</span><span class="si">}</span><span class="s">, id same_list_of_int: </span><span class="si">{</span><span class="nb">id</span><span class="p">(</span><span class="n">same_list_of_int</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="nb">id</span> <span class="n">list_of_int</span><span class="p">:</span> <span class="mi">140349047085696</span><span class="p">,</span> <span class="nb">id</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="mi">140349047173696</span>
</code></pre></div></div>

<p>Как же понять, один передо мной объект с разними псевдонимами или это разные объекты. Объекты можно сравнить на равенство, а можно проверить на идентичность. Равенство скажет, что объекты и их содержимое эквиваленты, а идентичность скажет на один ли объект они ссылаются:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">list_of_int</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">==</span> <span class="n">list_of_int</span>
<span class="n">out</span><span class="p">:</span> <span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="ow">is</span> <span class="n">list_of_int</span>
<span class="n">out</span><span class="p">:</span> <span class="bp">False</span>
</code></pre></div></div>

<p>И последнее. Любое переназначение другому объекту существующего имени ведет к отвязыванию от текущего объекта и привязыванию к новому:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">list_of_int</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"list_of_int: </span><span class="si">{</span><span class="n">list_of_int</span><span class="si">}</span><span class="s">, same_list_of_int: </span><span class="si">{</span><span class="n">same_list_of_int</span><span class="si">}</span><span class="s"> "</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="n">list_of_int</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> 
            
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">list_of_int</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"list_of_int is same_list_of_int: </span><span class="si">{</span><span class="n">list_of_int</span> <span class="ow">is</span> <span class="n">same_list_of_int</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="n">list_of_int</span> <span class="ow">is</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="bp">False</span>
        
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_of_int</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">list_of_int</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">same_list_of_int</span> <span class="o">=</span> <span class="n">same_list_of_int</span><span class="o">*</span><span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="s">f"list_of_int: </span><span class="si">{</span><span class="n">list_of_int</span><span class="si">}</span><span class="s">, same_list_of_int: </span><span class="si">{</span><span class="n">same_list_of_int</span><span class="si">}</span><span class="s"> "</span><span class="p">)</span>
<span class="n">out</span><span class="p">:</span> <span class="n">list_of_int</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">same_list_of_int</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>
:ET